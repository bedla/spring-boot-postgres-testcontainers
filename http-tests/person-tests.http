GET http://localhost:8080/api/v1/person
Accept: application/json

> {%
client.test("Query for empty persons", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.length === 0, "Person list should be empty");
});
%}

###

GET http://localhost:8080/api/v1/person/999999
Accept: application/json

> {%
client.test("Query for non-existing person", function() {
  client.assert(response.status === 404, "Response status is not 404");
});
%}

###

POST http://localhost:8080/api/v1/country
Content-Type: application/json

{
  "name": "US&A"
}

> {%
  var locationHeader = response.headers.valueOf("Location");
  var idx = locationHeader.lastIndexOf("/");
  var countryId = locationHeader.substring(idx + 1);
  client.global.set("usaCountryId", countryId);
%}

###

POST http://localhost:8080/api/v1/person
Content-Type: application/json

{
  "firstName": "Ivo",
  "lastName": "Smid",
  "countryId": {{usaCountryId}}
}

> {%
client.test("Create person", function() {
  client.assert(response.status === 201, "Response status is not 201");
  var locationHeader = response.headers.valueOf("Location");
  var idx = locationHeader.lastIndexOf("/");
  var personId = locationHeader.substring(idx + 1);
  client.global.set("personId", personId);
});
%}

###

GET http://localhost:8080/api/v1/person/{{personId}}
Accept: application/json

> {%
client.test("Person created", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.id === parseInt(client.global.get("personId")), "Invalid personId");
  client.assert(response.body.firstName === "Ivo", "Invalid person first name");
  client.assert(response.body.lastName === "Smid", "Invalid person first name");
  client.assert(response.body.country.id === parseInt(client.global.get("usaCountryId")), "Invalid person countryId");
  client.assert(response.body.country.name === "US&A", "Invalid person countryName");
});
%}

###

POST http://localhost:8080/api/v1/country
Content-Type: application/json

{
  "name": "Germany"
}

> {%
  var locationHeader = response.headers.valueOf("Location");
  var idx = locationHeader.lastIndexOf("/");
  var countryId = locationHeader.substring(idx + 1);
  client.global.set("gerCountryId", countryId);
%}

###

PUT http://localhost:8080/api/v1/person/{{personId}}
Content-Type: application/json

{
  "firstName": "Kristine",
  "lastName": "Kochanski",
  "countryId": {{gerCountryId}}
}

###


GET http://localhost:8080/api/v1/person/{{personId}}
Accept: application/json

> {%
client.test("Person created", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.id === parseInt(client.global.get("personId")), "Invalid personId");
  client.assert(response.body.firstName === "Kristine", "Invalid person first name");
  client.assert(response.body.lastName === "Kochanski", "Invalid person first name");
  client.assert(response.body.country.id === parseInt(client.global.get("gerCountryId")), "Invalid person countryId");
  client.assert(response.body.country.name === "Germany", "Invalid person countryName");
});
%}

###
